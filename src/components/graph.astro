---
import Layout from "../layouts/Layout.astro";
import { scrapData } from "../components/scraper.ts";
//import { orderDataset } from "../pages/orderDataset.ts";

interface Dataset {
  label: string;
  data: Array<number | null>;
  average: number;
  emptySlots: number;
}

interface Props {
  average: number;
  emptySlots: number;
  top?: number;
}

const { average, emptySlots, top } = Astro.props;

function getKeywords(data: Array<Array<string>>) {
  let keywords: Array<string> = [];
  for (let i = 0; i < data.length; i++) {
    //recorre los meses en busca de nuevas palabras
    for (let j = 0; j < data[i].length; j++) {
      //recorre los datos de cada mes
      let esta = false;
      for (let k = 0; k < keywords.length; k++) {
        //recorre las palabras en busca de coincidencias
        if (data[i][j].toLowerCase() === keywords[k]) {
          esta = true;
        }
      }
      //console.log(data[i][j].toLowerCase());
      if (!esta) {
        keywords.push(data[i][j].toLowerCase());
      }
    }
  }

  return keywords;
}

function populatePositions(keywords: Array<string>) {
  let position: Array<Array<number | null>> = [];

  for (let i = 0; i < keywords.length; i++) {
    position.push([]);
    for (let j = 0; j < monthYearArray.length; j++) {
      position[i].push(null);
    }
  }
  return position;
}

function OrderData(
  keywords: Array<string>,
  positions: Array<Array<number | null>>,
  data: Array<string>,
  mes: number
) {
  for (let i = 0; i < data.length; i++) {
    //Recorrer los datos
    for (let j = 0; j < positions.length; j++) {
      // recorrer las keywords
      if (data[i].toLowerCase() === keywords[j]) {
        //cuando los datos y la keyword coinciden, añadir en el mes la posición
        if (
          i + 1 < (positions[j][mes] ?? Infinity) ||
          positions[j][mes] === null
        ) {
          positions[j][mes] = i + 1;
        }
      }
    }
  }
  return positions;
}

const { data, monthYearArray } = await scrapData();

const keywords = getKeywords(data);

let positions = populatePositions(keywords);

for (let i = 0; i < data.length; i++) {
  positions = OrderData(keywords, positions, data[i], i);
}

const labels = keywords;
const datas = positions;
let datasets: Array<Dataset> = [];
for (var i = 0; i < labels.length; i++) {
  datasets.push({
    label: labels[i],
    data: datas[i],
    average: 0,
    emptySlots: 0,
  });
}

function calculateAverage(dataset: Dataset) {
  let average = 0;
  let data: Array<number | null> = dataset.data;
  let numberOfTimes = 0;

  for (var j = 0; j < data.length; j++) {
    if (data[j] !== null) {
      average += data[j] || 0;
      numberOfTimes++;
    }
  }

  average /= numberOfTimes;

  dataset.average = average;
  dataset.emptySlots = data.length - numberOfTimes;

  return dataset;
}

//console.log(datasets.length);

for (let i = 0; i < datasets.length; i++) {
  datasets[i] = calculateAverage(datasets[i]);
}

datasets = orderDataset(datasets);

for (let i = 0; i < datasets.length; i++) {
  console.log(datasets[i].label, datasets[i].average);
}

for (let i = 0; i < datasets.length; i++) {
  if (datasets[i].average > average || datasets[i].emptySlots > emptySlots) {
    datasets.splice(i, 1);
    i--;
  }
}

if (top) {
  datasets = datasets.splice(0, top);
}
---

<div>
  <canvas id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script is:inline define:vars={{ datasets, monthYearArray }}>
  document.addEventListener("DOMContentLoaded", function () {
    const ctx = document.getElementById("myChart").getContext("2d");

    new Chart(ctx, {
      type: "line",
      data: {
        labels: monthYearArray,
        datasets: datasets,
      },
    });
  });
</script>
<style>
  canvas {
    width: 100%;
    height: 100%;
  }
</style>
